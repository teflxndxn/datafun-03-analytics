# requirements.txt - list all the packages the project needs
#
# In this file, ignore hashes (#) - they are just used to create comments.
# Lines starting with a hash are ignored when installing packages using this file.

# ======================================================
# IMPORTANT: The contents of this file vary by project
# ======================================================

# Some common dependencies are provided in this example.
# Comment them in or out as you need them.

# ======================================================
# STEP A - CREATE A LOCAL PROJECT VIRTUAL ENV (.venv)
# ======================================================

# This option uses the most current or default Python -
# if an older version is required, use the ADVANCED OPTION below.

# Create your local project virtual environment
# This step ensures you have an isolated Python environment for your project.
# This is typically just done once at the beginning of a project.
# If it gets messed up, we can delete .venv and recreate it at any time.

# Run the following command to create a virtual environment in the project root.
### On Windows, Use PowerShell (not cmd) - don't include the #:
# py -m venv .venv

### On Mac/Linux, Use zsh or bash (or PowerShell) - don't include the #:
# python3 -m venv .venv

# If VS Code asks: We noticed a new environment has been created.
# Do you want to select it for the workspace folder?
# Click Yes.

# ======================================================
# STEP A (ADVANCED OPTION) - ONLY WHEN OLDER PYTHON VERSION IS REQUIRED
# ======================================================

# IMPORTANT:
# If the project requires a large tool like Apache Kafka,
# we may need to install an earlier version of Python
# and specify the required version when we create the virtual environment.
# On Windows, Use PowerShell (not cmd) - don't include the #:
# py -3.11 -m venv .venv
# On Mac  - don't include the #:
# brew install python@3.11
# python3 -m venv .venv
# On Linux/WSL - don't include the #:
# sudo apt update
# sudo apt install python3.11 python3.11-venv
# python3.11 -m venv .venv

# ======================================================
# STEP B - ALWAYS ACTIVATE THE (.venv) WHEN OPENING A NEW TERMINAL
# ======================================================

# ALWAYS activate the .venv before working on the project.
# Activate whenever you open a new terminal.

### Windows PowerShell Command (don't include the #):
# .\.venv\Scripts\activate

### Mac/Linux/WSL Command (don't include the #):
# source .venv/bin/activate

# Verify: When active, you can usually see (.venv) in the terminal.

# If using a Jupyter notebook, select the kernel associated with your project (.venv).

# ======================================================
# STEP C - INSTALL PACKAGES INTO (.venv) AS NEEDED
# ======================================================

# Install necessary packages listed below with this command:
# Keep packages updated with the most recent versions.

# When you identify a new package you want to use,
# Just update the list below and re-run this command.

### Windows Command (don't include the #):
# py -m pip install --upgrade pip setuptools wheel
# py -m pip install --upgrade -r requirements.txt --timeout 100

### Mac/Linux/WSL Command (don't include the #):
# python3 -m pip install --upgrade pip setuptools wheel
# python3 -m pip install --upgrade -r requirements.txt --timeout 100

# When you identify a new package you want to use,
# Just update the list below and re-run the install command.

# ======================================================
# STEP D: VS CODE - Select Interpreter
# ======================================================

# VS Code needs our populated .venv to interpret our files correctly.
# To set the VS Code Interpreter:
# 1. Open the Command Palette: Press Ctrl+Shift+P (Windows/Linux) or Cmd+Shift+P (Mac).
# 2. Search for "Python: Select Interpreter".
# 3. Type Python: Select Interpreter in the Command Palette search bar and select it from the dropdown.
# 4. Choose an Interpreter - A list of available Python environments will appear.
#    Look for the local .venv option.
# 5. Once selected, check the Python version displayed
#    in the bottom-left corner of the VS Code window in the status bar.

# ======================================================
# COMMON STANDARD LIBRARY MODULES (NO INSTALL REQUIRED)
# ======================================================
# These modules are built into Python and do NOT need to be installed.
# They are available automatically when using Python.

# Do NOT uncomment these - they are already included.
# json       - For handling
